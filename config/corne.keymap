/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp TAB    &kp Q  &kp W  &kp E     &kp R  &kp T        &kp Y       &kp U  &kp I      &kp O    &kp P     &kp BSPC
&kp LCTRL  &kp A  &kp S  &kp D     &kp F  &kp G        &kp H       &kp J  &kp K      &kp L    &kp SEMI  &kp SQT
&kp LSHFT  &kp Z  &kp X  &kp C     &kp V  &kp B        &kp N       &kp M  &kp COMMA  &kp DOT  &kp FSLH  &kp ESC
                         &kp LGUI  &mo 1  &kp SPACE    &kp RETURN  &mo 2  &kp RALT
            >;
        };

        lower_layer {
            bindings = <
&kp TAB    &kp F1  &kp F2  &kp F3    &kp F4  &kp F5            &kp F6      &kp F7      &kp F8             &kp F9           &kp C_PLAY_PAUSE  &kp BSPC
&mo 3      &trans  &trans  &trans    &trans  &trans            &kp LEFT    &kp DOWN    &kp UP             &kp RIGHT        &trans            &trans
&kp LSHFT  &trans  &trans  &trans    &trans  &kp C_PREVIOUS    &kp C_NEXT  &kp K_MUTE  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &trans            &trans
                           &kp LGUI  &trans  &kp RETURN        &kp SPACE   &trans      &kp RALT
            >;
        };

        raise_layer {
            bindings = <
&kp TAB    &kp N1           &kp N2  &kp N3    &kp N4             &kp N5        &kp NUMBER_6  &kp N7     &kp NUMBER_8  &kp N9    &kp N0  &kp BSPC
&trans     &kp K_SCROLL_UP  &trans  &trans    &kp K_SCROLL_DOWN  &trans        &kp MINUS     &kp EQUAL  &kp LBKT      &kp RBKT  &trans  &kp BACKSLASH
&kp LSHFT  &trans           &trans  &trans    &trans             &trans        &kp UNDER     &kp PLUS   &kp LBRC      &kp RBRC  &trans  &kp GRAVE
                                    &kp LGUI  &trans             &kp RETURN    &kp SPACE     &trans     &kp RALT
            >;
        };

        controls {
            bindings = <
&trans  &trans      &trans        &trans        &trans        &bootloader    &bootloader      &trans           &trans           &trans           &ext_power EP_TOG  &trans
&trans  &bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &trans         &rgb_ug RGB_HUD  &rgb_ug RGB_HUI  &rgb_ug RGB_SAD  &rgb_ug RGB_SAI  &trans             &trans
&trans  &trans      &trans        &trans        &trans        &trans         &rgb_ug RGB_EFF  &rgb_ug RGB_BRD  &rgb_ug RGB_BRI  &trans           &trans             &trans
                                  &trans        &trans        &trans         &trans           &trans           &trans
            >;
        };

        rgb {
            bindings = <
&rgb_ug RGB_COLOR_HSB(0,0,99)   &rgb_ug RGB_COLOR_HSB(0,0,100)  &rgb_ug RGB_COLOR_HSB(0,0,100)  &rgb_ug RGB_COLOR_HSB(0,0,100)  &rgb_ug RGB_COLOR_HSB(0,0,100)  &rgb_ug RGB_COLOR_HSB(0,0,100)    &rgb_ug RGB_COLOR_HSB(0,0,100)  &rgb_ug RGB_COLOR_HSB(0,0,100)  &rgb_ug RGB_COLOR_HSB(0,0,100)  &rgb_ug RGB_COLOR_HSB(0,0,100)  &rgb_ug RGB_COLOR_HSB(0,0,100)  &rgb_ug RGB_COLOR_HSB(0,0,100)
&rgb_ug RGB_COLOR_HSB(0,0,100)  &rgb_ug RGB_COLOR_HSB(0,0,100)  &rgb_ug RGB_COLOR_HSB(0,0,100)  &rgb_ug RGB_COLOR_HSB(0,0,100)  &rgb_ug RGB_COLOR_HSB(0,0,100)  &rgb_ug RGB_COLOR_HSB(0,0,100)    &rgb_ug RGB_COLOR_HSB(0,0,100)  &rgb_ug RGB_COLOR_HSB(0,0,100)  &rgb_ug RGB_COLOR_HSB(0,0,100)  &rgb_ug RGB_COLOR_HSB(0,0,100)  &rgb_ug RGB_COLOR_HSB(0,0,100)  &rgb_ug RGB_COLOR_HSB(0,0,100)
&rgb_ug RGB_COLOR_HSB(0,0,100)  &rgb_ug RGB_COLOR_HSB(0,0,100)  &rgb_ug RGB_COLOR_HSB(0,0,100)  &rgb_ug RGB_COLOR_HSB(0,0,100)  &rgb_ug RGB_COLOR_HSB(0,0,100)  &rgb_ug RGB_COLOR_HSB(0,0,100)    &rgb_ug RGB_COLOR_HSB(0,0,100)  &rgb_ug RGB_COLOR_HSB(0,0,100)  &rgb_ug RGB_COLOR_HSB(0,0,100)  &rgb_ug RGB_COLOR_HSB(0,0,100)  &rgb_ug RGB_COLOR_HSB(0,0,100)  &rgb_ug RGB_COLOR_HSB(0,0,100)
                                                                                                &rgb_ug RGB_COLOR_HSB(0,0,100)  &rgb_ug RGB_COLOR_HSB(0,0,100)  &rgb_ug RGB_COLOR_HSB(0,0,100)    &rgb_ug RGB_COLOR_HSB(0,0,100)  &rgb_ug RGB_COLOR_HSB(0,0,100)  &rgb_ug RGB_COLOR_HSB(0,0,100)
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        RGB {
            if-layers = <0 1 2 3>;
            then-layer = <4>;
        };
    };
};

// LEDs are per half for split keyboards

&led_strip {
    chain-length = <27>;
};
